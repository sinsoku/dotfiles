if has('vim_starting')
  set nocompatible               " Be iMproved
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
NeoBundle 'Shougo/vimshell.vim'

NeoBundle 'tpope/vim-fugitive'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}
NeoBundle 'rainux/vim-desert-warm-256'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-visualstar'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-surround'
NeoBundle 'vim-jp/vimdoc-ja'
" vim-scripts repos
NeoBundle 'rails.vim'
NeoBundle 'taglist.vim'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'kannokanno/previm'
NeoBundle 'tyru/open-browser.vim'

filetype plugin indent on     " Required!

" Installation check.
NeoBundleCheck

set helplang=ja
syntax on
set number
set nowrap
set ruler
set wildmenu
set foldlevel=0
set clipboard+=unnamed,unnamedplus
set laststatus=2
set hlsearch
set showcmd
set showmode
set noswapfile
set autoread
set display=uhex
set autoindent
set smartindent
set cindent
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=0
set backspace=indent,eol,start
set t_Co=256
autocmd ColorScheme * call s:highlight_settings()
function! s:highlight_settings()
  for name in ["Normal", "NonText", "LineNr"]
    execute "highlight " . name . " ctermfg=231 ctermbg=none"
  endfor
endfunction
colorscheme desert-warm-256

" visualstar
nnoremap * *N
nnoremap # #N
map * <Plug>(visualstar-*)N
map # <Plug>(visualstar-#)N

" taglist
set tags=tags

nnoremap <Space>. :<C-u>edit $MYVIMRC<Enter>
nnoremap <Space>s. :<C-u>source $MYVIMRC<Enter>
nnoremap <C-h> :<C-u>help<Space><C-r><C-w><Enter>

" whitespaceEOL on highlight
highlight WhitespaceEOL ctermbg=red guibg=red
autocmd BufWinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')
autocmd WinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')

" tabstring on highlight
highlight TabString ctermbg=red guibg=red
autocmd BufWinEnter * let w:m2 = matchadd("TabString", '^\t+')
autocmd WinEnter * let w:m2 = matchadd("TabString", '^\t+')

" JpSpace on underline
highlight ZenkakuSpace cterm=underline ctermbg=red guibg=red
autocmd BufWinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')
autocmd WinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')

" auto-mkdir
augroup vimrc-auto-mkdir  " {{{
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'))
  function! s:auto_mkdir(dir)  " {{{
    if !isdirectory(a:dir)
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction  " }}}
augroup END  " }}}

" magic comment
function! MagicComment()
  let magic_comment = "# -*- coding: utf-8 -*-"
  call append(0, magic_comment)
endfunction
nnoremap <Space>m :call MagicComment()<Enter>

" quickrun
let g:quickrun_config = {}
" let g:quickrun_config['ruby.rspec'] = {'runner': 'shell', 'command': 'spring', 'cmdopt': "rspec -l %{line('.')}" }
let g:quickrun_config['ruby.rspec'] = {'runner': 'shell', 'command': 'bundle', 'cmdopt': "exec rspec -l %{line('.')}" }
augroup RSpec
  autocmd!
  autocmd BufWinEnter,BufNewFile *_spec.rb set filetype=ruby.rspec
augroup END
let g:quickrun_config.markdown = {'type': 'markdown/pandoc', 'cmdopt': '-s', 'outputter': 'browser'}

" markdown syntax
autocmd BufRead,BufNewFile *.md set filetype=markdown

" j, k による移動を折り返されたテキストでも自然に振る舞うように変更
nnoremap j gj
nnoremap k gk
